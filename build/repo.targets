<Project>
  <PropertyGroup>
    <NuGetPublishFeed>https://dotnet.myget.org/F/aspnetcore-ci-dev/api/v2/package</NuGetPublishFeed>
    <NuGetPublishVolatileFeed>https://dotnet.myget.org/F/aspnetcore-volatile-dev/api/v2/package</NuGetPublishVolatileFeed>

    <_BuildGraphFile>$(BuildDir)BuildGraph.proj</_BuildGraphFile>
    <_CloneRepositoryRoot>$(RepositoryRoot).r\</_CloneRepositoryRoot>
    <_DependencyPackagesDirectory>$(RepositoryRoot).deps\build\</_DependencyPackagesDirectory>
    <_CommitsFile>$(RepositoryRoot).deps\build\RepositoryCommits.proj</_CommitsFile>
    <_RestoreGraphSpecsDirectory>$(RepositoryRoot)obj\package-specs\</_RestoreGraphSpecsDirectory>

    <_RepositoryBuildTargets Condition="'$(_RepositoryBuildTargets)'=='' AND '$(CompileOnly)'=='true'">/t:Package /t:VerifyPackages</_RepositoryBuildTargets>
    <_RepositoryBuildTargets Condition="'$(_RepositoryBuildTargets)'==''">/t:Verify</_RepositoryBuildTargets>
    <_RepositoriesWithCommitsFile>$(RepositoryRoot).deps\build\Repositories.props</_RepositoriesWithCommitsFile>

    <PrepareDependsOn>$(PrepareDependsOn);FilterRepositories</PrepareDependsOn>
    <CleanDependsOn>$(CleanDependsOn);CleanUniverseArtifacts</CleanDependsOn>
    <BuildDependsOn>$(BuildDependsOn);CloneRepositories;BuildRepositories</BuildDependsOn>
  </PropertyGroup>

  <Import
    Project="$(_RepositoriesWithCommitsFile)"
    Condition="Exists('$(_RepositoriesWithCommitsFile)')" />
  <Import
    Project="Repositories.props"
    Condition="!Exists('$(_RepositoriesWithCommitsFile)')" />
  <Import
    Project="$(_CommitsFile)"
    Condition="Exists('$(_CommitsFile)')" />

  <Target Name="CleanUniverseArtifacts">
    <RemoveDir Directories="obj" Condition="Exists('obj')" />
    <RemoveDir Directories="$(_CloneRepositoryRoot)" Condition="Exists('$(_CloneRepositoryRoot)')" />
    <RemoveDir Directories="$(_ArtifactsPackagesDirectory)" Condition="Exists('$(_ArtifactsPackagesDirectory)')" />
  </Target>

  <Target Name="FilterRepositories">
    <ItemGroup Condition="'$(KOREBUILD_REPOSITORY_INCLUDE)'!=''">
      <_RepositoriesToInclude Include="$(KOREBUILD_REPOSITORY_INCLUDE)" />
      <Repository
        Remove="@(Repository)"
        Condition="'@(Repository)'!='@(_RepositoriesToInclude)' AND '%(Identity)'!=''" />
    </ItemGroup>

    <ItemGroup Condition="'$(KOREBUILD_REPOSITORY_EXCLUDE)'!=''">
      <RepositoriesToExclude Include="$(KOREBUILD_REPOSITORY_EXCLUDE)" />
      <Repository Remove="@(RepositoriesToExclude)" />
    </ItemGroup>

    <Warning Text="KOREBUILD_REPOSITORY_EXCLUDE AND KOREBUILD_REPOSITORY_INCLUDE are specified."
      Condition="'$(KOREBUILD_REPOSITORY_INCLUDE)' != '' AND '$(KOREBUILD_REPOSITORY_EXCLUDE)' != ''" />

    <Message Text="%(Repository.CloneUrl)" />
  </Target>

  <Target Name="CloneRepositories">
    <ItemGroup>
      <_CloneRepository Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          CloneRepository=%(Repository.Identity);
          CloneUrl=%(Repository.CloneUrl);
          CloneBranch=%(Repository.Branch);
          CloneRepositoryCommit=%(Repository.Commit);
          ShallowClone=true;
          UseGateBranch=$(UseGateBranch)
        </AdditionalProperties>
      </_CloneRepository>
    </ItemGroup>

    <RemoveDir Directories="$(_CloneRepositoryRoot)" Condition="Exists('$(_CloneRepositoryRoot)')" />
    <MakeDir Directories="$(_CloneRepositoryRoot)" />

    <MSBuild Projects="@(_CloneRepository)"
      Targets="_CloneRepository"
      BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="_CloneRepository">
    <PropertyGroup>
      <ShallowClone Condition="'$(ShallowClone)'=='' OR '$(CloneRepositoryCommit)'!=''">false</ShallowClone>
      <_CloneArguments>git clone --quiet $(CloneUrl)</_CloneArguments>
      <_CloneArguments Condition="'$(ShallowClone)'=='true'">$(_CloneArguments) --depth 1</_CloneArguments>
    </PropertyGroup>

    <Message Text="Cloning $(CloneRepository) ..." Importance="High" />
    <Exec
      Command="$(_CloneArguments) --branch $(CloneBranch)-gate"
      Condition="'$(UseGateBranch)'=='true'"
      IgnoreExitCode="true"
      IgnoreStandardErrorWarningFormat="true"
      WorkingDirectory="$(_CloneRepositoryRoot)">
      <Output TaskParameter="ExitCode" PropertyName="GateBranchExitCode" />
    </Exec>

    <Warning Text="Using $(CloneBranch)-gate for $(CloneRepository)"
      Condition="'$(GateBranchExitCode)'=='0'" />

    <Exec
      Command="$(_CloneArguments) --branch $(CloneBranch)"
      Condition="'$(GateBranchExitCode)'!='0'"
      WorkingDirectory="$(_CloneRepositoryRoot)" />

    <Exec
      Command="git reset --quiet --hard $(CloneRepositoryCommit)"
      WorkingDirectory="$(_CloneRepositoryRoot)$(CloneRepository)"
      Condition="'$(CloneRepositoryCommit)'!=''" />
  </Target>

  <Target Name="BuildRepositories"
     DependsOnTargets="_FindDotNetPath;_GenerateRestoreGraphSpecs;_GenerateBuildGraph;_UpdateNuGetConfig;_CreateRepositoriesListWithCommits">

    <MSBuild
      Projects="$(MSBuildThisFileDirectory)RepositoryBuild.targets"
      Targets="BuildRepositories"
      Properties="
        APIKey=$(APIKey);
        BuildDir=$(BuildDir);
        BuildInParallel=$(BuildInParallel);
        BuildNumber=$(BuildNumber);
        Configuration=$(Configuration);
        DotNetPath=$(DotNetPath);
        NuGetPublishVolatileFeed=$(NuGetPublishVolatileFeed);
        PublishPackages=$(PublishPackages);
        RepositoryRoot=$(RepositoryRoot);
        _BuildGraphFile=$(_BuildGraphFile);
        _CloneRepositoryRoot=$(_CloneRepositoryRoot);
        _DependencyPackagesDirectory=$(_DependencyPackagesDirectory);
        _RepositoryBuildTargets=$(_RepositoryBuildTargets);
        _RestoreGraphSpecsDirectory=$(_RestoreGraphSpecsDirectory)" />

    <MSBuild
      Projects="$(MSBuildThisFileDirectory)PublishPackages.targets"
      Condition="'$(PublishPackages)'=='true'"
      Properties="
        PackagesDirectory=$(ArtifactsDir);
        DotNetPath=$(DotNetPath);
        NuGetFeed=$(NuGetPublishFeed);
        APIKey=$(APIKey)" />
  </Target>

  <Target Name="_GenerateRestoreGraphSpecs" DependsOnTargets="_FindDotNetPath">
    <ItemGroup>
      <Solution Include="$(_CloneRepositoryRoot)%(Repository.Identity)\*.sln">
        <Repository>%(Repository.Identity)</Repository>
      </Solution>

      <Solution>
        <AdditionalProperties>RestoreGraphOutputPath=$(_RestoreGraphSpecsDirectory)%(Solution.Repository)\%(Solution.FileName)%(Solution.Extension).json</AdditionalProperties>
      </Solution>
    </ItemGroup>

    <MSBuild
      Projects="@(Solution)"
      Targets="GenerateRestoreGraphFile"
      BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="_GenerateBuildGraph" DependsOnTargets="_FindDotNetPath">
    <Exec
      Command="$(DotNetPath) run -r &quot;$(_CloneRepositoryRoot) &quot; --graph-specs-root &quot;$(_RestoreGraphSpecsDirectory) &quot; &quot;$(_BuildGraphFile)&quot;"
      WorkingDirectory="$(RepositoryRoot)tools\BuildGraph\" />
  </Target>

  <Target Name="_UpdateNuGetConfig">
    <UpdatePackageSource
      NuGetConfigPath="$(_CloneRepositoryRoot)%(Repository.Identity)\NuGet.config"
      SourceName="Dependencies"
      SourceUri="$(_DependencyPackagesDirectory)"
      Condition="Exists('$(_DependencyPackagesDirectory)')" />

    <UpdatePackageSource
      NuGetConfigPath="$(_CloneRepositoryRoot)%(Repository.Identity)\NuGet.config"
      SourceName="Artifacts"
      SourceUri="$(BuildDir)" />
  </Target>

  <Target Name="_CreateRepositoriesListWithCommits" DependsOnTargets="_FindDotNetPath">
    <PropertyGroup>
      <RepositoryFileWithCommit>$(BuildDir)Repositories.props</RepositoryFileWithCommit>
    </PropertyGroup>
    <Copy
      SourceFiles="$(MSBuildThisFileDirectory)Repositories.props"
      DestinationFiles="$(RepositoryFileWithCommit)" />

    <Exec
      Command="$(DotNetPath) run -r &quot;$(_CloneRepositoryRoot) &quot; $(RepositoryFileWithCommit)"
      WorkingDirectory="$(RepositoryRoot)tools\AddCommitInfo" />
  </Target>

  <Target Name="_FindDotNetPath">
    <GetDotNetHost>
      <Output TaskParameter="ExecutablePath" PropertyName="DotNetPath" />
    </GetDotNetHost>
  </Target>
</Project>
